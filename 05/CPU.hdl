// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    //判断是A(0)还是C(1)
    DMux(in=true,sel=instruction[15],a=isA,b=isC);

    //如果是C指令:111 a cccccc ddd jjj
    //根据cccccc ALU计算 并输出数值
    Mux16(a=outA, b=inM, sel=instruction[12],out=AorM);
    ALU(x=outD,y=AorM,zx=instruction[11],nx=instruction[10],zy=instruction[9],ny=instruction[8],f=instruction[7],no=instruction[6],out=outM,out=outALU,ng=ng,zr=zr);
    //根据ddd 进行赋值

    //通过判断是A or C 指令，判断写入A的数值是什么？
    Mux16(a=outALU,b=instruction,sel=isA,out=inA);

    //判断是否要写入?除了15位和5位为10的情况外，均写入A。
    Not(in=instruction[5],out=Not5);
    Nand(a=instruction[15],b=Not5,out=loadA);
    //写入A
    ARegister(in=inA,load=loadA,out=outA,out[0..14]=addressM);
    //写入D
    And(a=isC,b=instruction[4],out=loadD);
    DRegister(in=outALU,load=loadD,out=outD);
    //如果C指令，且改变M的数值，则写入writeM
    And(a=instruction[3],b=isC,out=writeM);
    
    //PC
    Not(in=ng,out=notng);
    Not(in=zr,out=notzr);
    And(a=notng,b=notzr,out=pt);
    //j3,
    And(a=instruction[0],b=pt,out=j1);
    //j2
    And(a=instruction[1],b=zr,out=j2);
    //j1
    And(a=instruction[2],b=ng,out=j3);
    Or(a=j1,b=j2,out=j12);
    Or(a=j12,b=j3,out=j123);
    And(a=j123,b=isC,out=jump);
    PC(in=outA,load=jump,inc=true,reset=reset,out[0..14]=pc);
}